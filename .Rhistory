weight_1 = c(153, 175, 155, 135, 172, 150, 115, 137, 200, 130, 140, 265, 185, 112, 140, 150, 165, 185, 210, 220)
var(height_1)
cov(weight_1,height_1)
var(weight_1)
Y1 <- cbind(height_1,weight_1)
ybar1 <- apply(Y1,2,mean)
ybar1
n = length(height_1)
S <- matrix(0,2,2)
for(i in 1:4){
S <- S + (Y1[i,]-ybar1)%*%t(Y1[i,]-ybar1)
}
S
height_1 = c(69, 74, 58, 70, 72, 67, 66, 70, 76, 68, 72, 79, 74, 67, 66, 71, 74, 75, 75, 76)
weight_1 = c(153, 175, 155, 135, 172, 150, 115, 137, 200, 130, 140, 265, 185, 112, 140, 150, 165, 185, 210, 220)
var(height_1)
cov(weight_1,height_1)
var(weight_1)
Y1 <- cbind(height_1,weight_1)
ybar1 <- apply(Y1,2,mean)
ybar1
n = length(height_1)
S <- matrix(0,2,2)
for(i in 1:n){
S <- S + (Y1[i,]-ybar1)%*%t(Y1[i,]-ybar1)
}
S <- S/(n-1)
S
eigen(Y1)
pop_var = matrix(c(20,100,100,1000),2,2, byrow = TRUE)
po_var
pop_var
eigen(S%*%solve(pop_var))
eigen(S%*%solve(pop_var))$values
ev = eigen(S%*%solve(pop_var))$values
ev
p = 2
ev[i]
ev
ev[i]
ev[1]
u2 = c(1,2,3,4)
sum(u2)
u_calculator = function(ev,p){
u2 = c()
for (i in 1:p){
append(u2,ev[i] - ln(ev[i]))
}
return ((n-1)* sum(u2) * p )
}
u_calculator(ev,2)
u_calculator = function(ev,p){
u2 = c()
for (i in 1:p){
append(u2,ev[i] - log(ev[i]))
}
return ((n-1)* sum(u2) * p )
}
u_calculator(ev,2)
u_calculator = function(ev,p){
u2 = c()
for (i in 1:p){
append(u2,ev[i] - log(ev[i]))
}
print(u2)
return ((n-1)* sum(u2) * p )
}
u_calculator(ev,2)
for (i in 1:p){
print(i)
}
for (i in 1:p){
print(ev[i])
}
u2 = c()
for (i in 1:p){
append(u2, ev[i]-log(ev[i]))
}
u2
print(ev[i]-log(ev[i]))
append(u2, 1)
u2
u2 = c(0)
append(u2, 1)
u2
u2
u2 = append(u2, 1)
u2
u_calculator = function(ev,p){
u2 = c()
for (i in 1:p){
u2 = append(u2,ev[i] - log(ev[i]))
}
return ((n-1)* sum(u2) * p )
}
u_calculator(ev,2)
u_calculator = function(ev,p){
u2 = c()
for (i in 1:p){
u2 = append(u2,ev[i] - log(ev[i]))
}
return ((n-1)*( sum(u2) - p) )
}
u_calculator(ev,2)
u = (n-1)
ev
qchisq(0.95,3)
S%*%solve(pop_var)
F_
qf(0.95,d,v_e-d-1)
#Homework #4 - Question 1
x1 = c(189, 192, 217, 221, 171, 192, 213, 192, 170, 201, 195, 205, 180, 192,
200, 192, 200, 181, 192)
x2 = c(245, 260, 276, 299, 239, 262, 278, 255, 244, 276, 242, 263, 252, 283,
294, 277, 287, 255, 287)
x3 = c(137, 132, 141, 142, 128, 147, 136, 128, 128, 146, 128, 147, 121, 138,
138, 150, 136, 146, 141)
x4 = c(163, 217, 192, 213, 158, 173, 201, 185, 192, 186, 192, 192, 167, 183,
188, 177, 173, 183, 198)
X = cbind(x1,x2,x3,x4)
n1 <- dim(X)[1]
n1
p <- dim(X)[2]
#getting the covariance
S1 = cov(X)
S1
#getting the mean of each column
xbar <- apply(X,2,mean)
xbar
#calculating it using the formula
Sx <- matrix(0,4,4)
for(i in 1:n1){
Sx <- Sx + (X[i,]-xbar)%*%t(X[i,]-xbar)
}
Sx <-Sx/(n1-1)
#using to see if S1 and Sx are the same
Sx
y1 = c(181, 158, 184, 171, 181, 181, 177, 198, 180, 177, 176, 192, 176,
169, 164, 181, 192, 181, 175, 197)
y2 = c(305, 237, 300, 273, 297, 308, 301, 308, 286, 299, 317, 312, 285,
287, 265, 308, 276, 278, 271, 303)
y3 = c(184, 133, 166, 162, 163, 160, 166, 141, 146, 171, 166, 166, 141,
162, 147, 157, 154, 149, 140, 170)
y4 = c(209, 188, 231, 213, 224, 223, 221, 197, 214, 192, 213, 209, 200,
214, 192, 204, 209, 235, 192, 205)
Y = cbind(y1,y2,y3,y4)
n2 = dim(Y)[1]
n2
ybar <- apply(Y,2,mean)
ybar
Sy <- matrix(0,4,4)
for(i in 1:n2){
Sy <- Sy + (Y[i,]-ybar)%*%t(Y[i,]-ybar)
}
Sy <-Sy/(n2-1)
Sy
S2 = cov(Y)
S2
v1 = n1 -1
v2 = n2 -1
S_p = ((v1)*Sx + (v2)*Sy)/(v1+v2)
S_p
det(S1)
det(S2)
det(S_p)
log(det(S_p))
ln_M = (1/2)*(v1 * log(det(S1)) + v2 * log(det(S2))) - (1/2)*(v1+v2)*(log(det(S_p)))
ln_M
c1 = (((1/v1) + (1/v2) - (1/(v1+v2))) * (2*p^2 + 3*p - 1))/(6*(p+1))
c1
u1 = -2 *(1-c1) *ln_M
u1
# Question 2: hypothesis test of parallelism
C <- matrix(c(-1,1,0,0,0,-1,1,0,0,0,-1,1),3,4,byrow = TRUE)
C
T_2 = ((n1* n2)/(n1+n2)) *(t(xbar - ybar) %*% t(C) %*% solve(C %*% S_p %*% t(C)) %*% C %*% (xbar-ybar))
T_2
xbar
ybar
((37*(4-1))/(37-(4-1) + 1)) * qf (0.95,3,37-(4-1)+1)
# Question 3:
mydata <- t(matrix(c(5.4,6.0,6.3,6.7,5.0,5.3,5.3,6.5,4.8,5.0,6.5,7.0,
5.2,6.2,6.0,5.8,4.8,4.9,4.2,5.6,5.4,5.0,6.0,6.4,
6.1,5.9,6.0,7.0,3.9,4.0,4.4,5.0,4.9,5.1,5.9,6.5,
4.8,5.0,4.9,5.0,4.0,5.1,4.8,5.8,5.7,5.2,6.4,6.4,
5.0,5.7,5.0,6.5,5.6,5.4,5.1,6.2,4.2,4.6,5.3,6.3,
5.7,6.1,6.0,6.6,6.0,5.5,5.7,6.0,6.0,5.3,5.8,6.4,
6.0,6.0,5.8,6.0,5.2,4.8,5.4,6.0,5.1,5.2,6.2,6.5,
4.0,5.0,4.0,5.0,5.3,5.1,5.8,6.4,4.8,4.6,5.7,5.7,
5.7,5.4,4.9,5.0,5.9,6.1,5.7,6.0,5.3,5.4,6.8,6.6,
5.6,5.2,5.4,5.8,6.1,6.0,6.1,6.2,4.6,4.4,5.7,5.6,
5.8,6.1,5.2,6.4,6.2,5.7,5.9,6.0,4.5,4.0,5.0,5.9,
5.3,5.9,5.8,6.0,5.1,4.9,5.3,4.8,4.4,4.2,5.6,5.5),12,12))
mydata
k <- 3
n <- dim(mydata)[1]
p <- dim(mydata)[2]/k
p
mydata1 <- mydata[,1:4]
mydata2 <- mydata[,5:8]
mydata3 <- mydata[,9:12]
ybar1 <- apply(mydata1,2,mean)
ybar2 <- apply(mydata2,2,mean)
ybar3 <- apply(mydata3,2,mean)
ybar <- (ybar1+ybar2+ybar3)/k
ybar3
H <- n*((ybar1-ybar)%*%t(ybar1-ybar)+
(ybar2-ybar)%*%t(ybar2-ybar)+
(ybar3-ybar)%*%t(ybar3-ybar))
H
E1 <- matrix(0,p,p)
for(j in 1:n){
E1 <- E1+(mydata1[j,]-ybar1)%*%t(mydata1[j,]-ybar1)
}
E1
E2 <- matrix(0,p,p)
for(j in 1:n){
E2 <- E2+(mydata2[j,]-ybar2)%*%t(mydata1[j,]-ybar2)
}
E3 <- matrix(0,p,p)
for(j in 1:n){
E3 <- E3+(mydata3[j,]-ybar3)%*%t(mydata3[j,]-ybar3)
}
E <- E1+E2+E3
E
eig <- eigen(solve(E)%*%H)
eig
v_h <- k-1
v_e <- k*(n-1)
w <- v_e+v_h-(p+v_h+1)/2
t <- sqrt((p^2*v_h^2-4)/(p^2+v_h^2-5))
s <- min(v_h,p)
Lambda <- prod(1/(1+eig$values[1:s]))
Lambda
# Wilk's Lambda
Lambda <- prod(1/(1+eig$values[1:s])) #prod(1/(1+eig$values)) different
#Lambda <- det(E)/det(E+H)
F_ <- ((1-sqrt(Lambda))/(sqrt(Lambda))) * ((v_e - p + 1 )/(p))
F_
qf(0.95,4,30)
theta <- eig$values[1]/(1+eig$values[1])
d <- max(p,v_h)
F_ <- (v_e-d-1)*eig$values[1]/d # upper bound
F_
qf(0.95,d,v_e-d-1)
C
eig
H
E
p
n
E1
E2
ybar
ybar2
mydata2
mydata1
E3
E2 <- matrix(0,p,p)
for(j in 1:n){
E2 <- E2+(mydata2[j,]-ybar2)%%t(mydata2[j,]-ybar2)
}
E2 <- matrix(0,p,p)
for(j in 1:n){
E2 <- E2+(mydata2[j,]-ybar2)%%t(mydata2[j,]-ybar2)
}
E2 <- E2+(mydata2[j,]-ybar2)%*%t(mydata2[j,]-ybar2)
E2 <- matrix(0,p,p)
for(j in 1:n){
E2 <- E2+(mydata2[j,]-ybar2)%*%t(mydata2[j,]-ybar2)
}
E2
E2 <- matrix(0,p,p)
for(j in 1:n){
E2 <- E2+(mydata2[j,]-ybar2)%*%t(mydata1[j,]-ybar2)
}
E2
for(j in 1:n){
E2 <- E2+(mydata2[j,]-ybar2)%*%t(mydata2[j,]-ybar2)
}
E2
E2 <- matrix(0,p,p)
for(j in 1:n){
E2 <- E2+(mydata2[j,]-ybar2)%*%t(mydata2[j,]-ybar2)
}
E2
E2 <- matrix(0,p,p)
for(j in 1:n){
E2 <- E2+(mydata2[j,]-ybar2)%*%t(mydata2[j,]-ybar2)
}
E2
E
eig <- eigen(solve(E)%*%H)
eig
eig <- eigen(solve(E)%*%H)
eig
E1 <- matrix(0,p,p)
for(j in 1:n){
E1 <- E1+(mydata1[j,]-ybar1)%*%t(mydata1[j,]-ybar1)
}
E1
E2 <- matrix(0,p,p)
for(j in 1:n){
E2 <- E2+(mydata2[j,]-ybar2)%*%t(mydata2[j,]-ybar2)
}
E2
E3 <- matrix(0,p,p)
for(j in 1:n){
E3 <- E3+(mydata3[j,]-ybar3)%*%t(mydata3[j,]-ybar3)
}
E <- E1+E2+E3
E
eig <- eigen(solve(E)%*%H)
eig
E''
E
v_h <- k-1
v_e <- k*(n-1)
w <- v_e+v_h-(p+v_h+1)/2
t <- sqrt((p^2*v_h^2-4)/(p^2+v_h^2-5))
s <- min(v_h,p)
Lambda <- prod(1/(1+eig$values[1:s]))
Lambda
# Wilk's Lambda
Lambda <- prod(1/(1+eig$values[1:s])) #prod(1/(1+eig$values)) different
#Lambda <- det(E)/det(E+H)
F_ <- ((1-sqrt(Lambda))/(sqrt(Lambda))) * ((v_e - p + 1 )/(p))
F_
qf(0.95,4,30)
solve(E)
eig
F_
qf(0.95,d,v_e-d-1)
qf(0.95,8,30)
qf(0.95,8,2(v_e-p+1))
qf(0.95,8,2*(v_e-p+1))
F_
theta <- eig$values[1]/(1+eig$values[1])
d <- max(p,v_h)
F_ <- (v_e-d-1)*eig$values[1]/d # upper bound
F_
qf(0.95,d,v_e-d-1)
eig <- eigen(solve(E)%*%H)
eig
Lambda
F_
# Wilk's Lambda
Lambda <- prod(1/(1+eig$values[1:s])) #prod(1/(1+eig$values)) different
#Lambda <- det(E)/det(E+H)
F_ <- ((1-sqrt(Lambda))/(sqrt(Lambda))) * ((v_e - p + 1 )/(p))
F_
theta <- eig$values[1]/(1+eig$values[1])
# Question 3:
mydata <- t(matrix(c(5.4,6.0,6.3,6.7,5.0,5.3,5.3,6.5,4.8,5.0,6.5,7.0,
5.2,6.2,6.0,5.8,4.8,4.9,4.2,5.6,5.4,5.0,6.0,6.4,
6.1,5.9,6.0,7.0,3.9,4.0,4.4,5.0,4.9,5.1,5.9,6.5,
4.8,5.0,4.9,5.0,4.0,5.1,4.8,5.8,5.7,5.2,6.4,6.4,
5.0,5.7,5.0,6.5,5.6,5.4,5.1,6.2,4.2,4.6,5.3,6.3,
5.7,6.1,6.0,6.6,6.0,5.5,5.7,6.0,6.0,5.3,5.8,6.4,
6.0,6.0,5.8,6.0,5.2,4.8,5.4,6.0,5.1,5.2,6.2,6.5,
4.0,5.0,4.0,5.0,5.3,5.1,5.8,6.4,4.8,4.6,5.7,5.7,
5.7,5.4,4.9,5.0,5.9,6.1,5.7,6.0,5.3,5.4,6.8,6.6,
5.6,5.2,5.4,5.8,6.1,6.0,6.1,6.2,4.6,4.4,5.7,5.6,
5.8,6.1,5.2,6.4,6.2,5.7,5.9,6.0,4.5,4.0,5.0,5.9,
5.3,5.9,5.8,6.0,5.1,4.9,5.3,4.8,4.4,4.2,5.6,5.5),12,12))
mydata
k <- 3
n <- dim(mydata)[1]
p <- dim(mydata)[2]/k
p
n
mydata1 <- mydata[,1:4]
mydata2 <- mydata[,5:8]
mydata3 <- mydata[,9:12]
ybar1 <- apply(mydata1,2,mean)
ybar2 <- apply(mydata2,2,mean)
ybar3 <- apply(mydata3,2,mean)
ybar <- (ybar1+ybar2+ybar3)/k
ybar3
ybar2
H <- n*((ybar1-ybar)%*%t(ybar1-ybar)+
(ybar2-ybar)%*%t(ybar2-ybar)+
(ybar3-ybar)%*%t(ybar3-ybar))
H
E1 <- matrix(0,p,p)
for(j in 1:n){
E1 <- E1+(mydata1[j,]-ybar1)%*%t(mydata1[j,]-ybar1)
}
E1
E2 <- matrix(0,p,p)
for(j in 1:n){
E2 <- E2+(mydata2[j,]-ybar2)%*%t(mydata2[j,]-ybar2)
}
E2
E3 <- matrix(0,p,p)
for(j in 1:n){
E3 <- E3+(mydata3[j,]-ybar3)%*%t(mydata3[j,]-ybar3)
}
E <- E1+E2+E3
E
eig <- eigen(solve(E)%*%H)
eig
v_h <- k-1
v_e <- k*(n-1)
w <- v_e+v_h-(p+v_h+1)/2
t <- sqrt((p^2*v_h^2-4)/(p^2+v_h^2-5))
s <- min(v_h,p)
Lambda <- prod(1/(1+eig$values[1:s]))
Lambda
# Wilk's Lambda
Lambda <- prod(1/(1+eig$values[1:s])) #prod(1/(1+eig$values)) different
#Lambda <- det(E)/det(E+H)
F_ <- ((1-sqrt(Lambda))/(sqrt(Lambda))) * ((v_e - p + 1 )/(p))
F_
qf(0.95,8,2*(v_e-p+1))
theta <- eig$values[1]/(1+eig$values[1])
d <- max(p,v_h)
F_ <- (v_e-d-1)*eig$values[1]/d # upper bound
F_
qf(0.95,d,v_e-d-1)
theta
F_
# Wilk's Lambda
Lambda <- prod(1/(1+eig$values[1:s])) #prod(1/(1+eig$values)) different
#Lambda <- det(E)/det(E+H)
F_ <- ((1-sqrt(Lambda))/(sqrt(Lambda))) * ((v_e - p + 1 )/(p))
F_
qf(0.95,8,2*(v_e-p+1))
# Question 3:
mydata <- t(matrix(c(5.4,6.0,6.3,6.7,5.0,5.3,5.3,6.5,4.8,5.0,6.5,7.0,
5.2,6.2,6.0,5.8,4.8,4.9,4.2,5.6,5.4,5.0,6.0,6.4,
6.1,5.9,6.0,7.0,3.9,4.0,4.4,5.0,4.9,5.1,5.9,6.5,
4.8,5.0,4.9,5.0,4.0,5.1,4.8,5.8,5.7,5.2,6.4,6.4,
5.0,5.7,5.0,6.5,5.6,5.4,5.1,6.2,4.2,4.6,5.3,6.3,
5.7,6.1,6.0,6.6,6.0,5.5,5.7,6.0,6.0,5.3,5.8,6.4,
6.0,6.0,5.8,6.0,5.2,4.8,5.4,6.0,5.1,5.2,6.2,6.5,
4.0,5.0,4.0,5.0,5.3,5.1,5.8,6.4,4.8,4.6,5.7,5.7,
5.7,5.4,4.9,5.0,5.9,6.1,5.7,6.0,5.3,5.4,6.8,6.6,
5.6,5.2,5.4,5.8,6.1,6.0,6.1,6.2,4.6,4.4,5.7,5.6,
5.8,6.1,5.2,6.4,6.2,5.7,5.9,6.0,4.5,4.0,5.0,5.9,
5.3,5.9,5.8,6.0,5.1,4.9,5.3,4.8,4.4,4.2,5.6,5.5),12,12))
mydata
k <- 3
n <- dim(mydata)[1]
p <- dim(mydata)[2]/k
p
n
mydata1 <- mydata[,1:4]
mydata2 <- mydata[,5:8]
mydata3 <- mydata[,9:12]
ybar1 <- apply(mydata1,2,mean)
ybar2 <- apply(mydata2,2,mean)
ybar3 <- apply(mydata3,2,mean)
ybar <- (ybar1+ybar2+ybar3)/k
ybar3
ybar2
H <- n*((ybar1-ybar)%*%t(ybar1-ybar)+
(ybar2-ybar)%*%t(ybar2-ybar)+
(ybar3-ybar)%*%t(ybar3-ybar))
H
E1 <- matrix(0,p,p)
for(j in 1:n){
E1 <- E1+(mydata1[j,]-ybar1)%*%t(mydata1[j,]-ybar1)
}
E1
E2 <- matrix(0,p,p)
for(j in 1:n){
E2 <- E2+(mydata2[j,]-ybar2)%*%t(mydata2[j,]-ybar2)
}
E2
E3 <- matrix(0,p,p)
for(j in 1:n){
E3 <- E3+(mydata3[j,]-ybar3)%*%t(mydata3[j,]-ybar3)
}
E <- E1+E2+E3
E
eig <- eigen(solve(E)%*%H)
eig
v_h <- k-1
v_e <- k*(n-1)
w <- v_e+v_h-(p+v_h+1)/2
t <- sqrt((p^2*v_h^2-4)/(p^2+v_h^2-5))
s <- min(v_h,p)
Lambda <- prod(1/(1+eig$values[1:s]))
Lambda
# Wilk's Lambda
Lambda <- prod(1/(1+eig$values[1:s])) #prod(1/(1+eig$values)) different
#Lambda <- det(E)/det(E+H)
F_ <- ((1-sqrt(Lambda))/(sqrt(Lambda))) * ((v_e - p + 1 )/(p))
F_
theta
d <- max(p,v_h)
F_ <- (v_e-d-1)*eig$values[1]/d # upper bound
F_
qf(0.95,d,v_e-d-1)
v_e
d
F_
qf(0.95,d,v_e-d-1)
qf(0.95,d,v_e-d-1)
H
E
#to get the test statistics to compare to T_2
F_crit2 = ((37*(4-1))/(37-(4-1) + 1)) * qf (0.95,3,37-(4-1)+1)
T_2 > F_crit2
F_ >
F_crit3 = qf(0.95,8,2*(v_e-p+1))
x2_crit = qchisq(0.95, 10)
x2_crit
qchisq(0.95,4,52)
qchisq(0.95,2,24)
setwd("C:/Users/Wesley Tat/OneDrive/Desktop/STA160 Project #1/STA-160-Final")
